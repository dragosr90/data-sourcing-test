(bsrc-etl-2-venv) PS C:\Users\B25712\bsrc-etl-venv\bsrc-etl> pytest test/test_transform/test_write_and_comment.py
============================================================================================== test session starts ===============================================================================================
platform win32 -- Python 3.10.11, pytest-8.3.3, pluggy-1.5.0
rootdir: C:\Users\B25712\bsrc-etl-venv\bsrc-etl
configfile: pyproject.toml
plugins: cov-6.0.0, mock-3.14.0
collected 27 items

test\test_transform\test_write_and_comment.py ......FF...................                                                                                                                                   [100%]

==================================================================================================== FAILURES ==================================================================================================== 
____________________________________________ test_transformation_dict_to_string[transformation_dict6-- Filter:\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n] _____________________________________________ 

transformation_dict = {'filter': {'conditions': ['TBL_A.col01 > 10', 'TBL_B.col02 IS NOT NULL']}}, output_string = '- Filter:\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n'

    @pytest.mark.parametrize(
        ("transformation_dict", "output_string"),
        [
            (  # One join condition
                {
                    "join": {
                        "left_source": "TBL_D",
                        "right_source": "TBL_E",
                        "condition": ["TBL_D.a = TBL_E.b"],
                        "how": "left",
                    },
                },
                "- Join (left):\nTBL_D.a = TBL_E.b",
            ),
            (  # Multiple join conditions
                {
                    "join": {
                        "left_source": "TBL_D",
                        "right_source": "TBL_E",
                        "condition": ["TBL_D.a = TBL_E.b", "TBL_D.f||TBL_D.g = TBL_E.e"],
                        "how": "left",
                    },
                },
                "- Join (left):\n"
                "  - TBL_D.a = TBL_E.b\n"
                "  - TBL_D.f||TBL_D.g = TBL_E.e",
            ),
            (  # Aggregation
                {
                    "aggregation": {
                        "group": ["TBL_D.a"],
                        "column_mapping": {"count_TBL_E_b": "count(TBL_E.b)"},
                    }
                },
                "- Aggregate:\n"
                "  - group by ['TBL_D.a']\n"
                "  - count_TBL_E_b = count(TBL_E.b)\n",
            ),
            (  # Pivot
                {
                    "pivot": {
                        "group_cols": ["TBL_A.col01", "TBL_A.col02"],
                        "pivot_col": "TBL_B.col04",
                        "pivot_value_col": "TBL_A.col03",
                        "column_mapping": {"X": "min", "Y": "avg", "Z": "first"},
                    }
                },
                "- Pivot:\n"
                "  - group by ['TBL_A.col01', 'TBL_A.col02']\n"
                "  - pivot column TBL_B.col04\n"
                "  - values from column TBL_A.col03\n"
                "  - using values:\n"
                "    - min(X)\n"
                "    - avg(Y)\n"
                "    - first(Z)\n",
            ),
            # Add Variables
            (
                {
                    "add_variables": {
                        "column_mapping": {
                            "NewCol01": "TBLA.col1",
                            "NewCol02": "cast(TBLB.col2 as string)",
                            "NewCol03": "TBLA.col3 + TBLC.col03",
                        },
                    }
                },
                "- Variable:\n"
                "  - NewCol01 = TBLA.col1\n"
                "  - NewCol02 = cast(TBLB.col2 as string)\n"
                "  - NewCol03 = TBLA.col3 + TBLC.col03\n",
            ),
            # Union
            (
                {
                    "union": {
                        "alias": "TABLE_A_B",
                        "column_mapping": {
                            "TABLE_A": {"c01_ab": "c01a", "c02_ab": "c02a"},
                            "TABLE_B": {"c01_ab": "c01b", "c02_ab": "c02b"},
                        },
                    }
                },
                "- Union:\n"
                "  - TABLE_A_B:\n"
                "    - c01a as c01_ab, c02a as c02_ab FROM TABLE_A\n"
                "    - c01b as c01_ab, c02b as c02_ab FROM TABLE_B",
            ),
            # Filter without alias
            (
                {"filter": {"conditions": ["TBL_A.col01 > 10", "TBL_B.col02 IS NOT NULL"]}},
                "- Filter:\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n",
            ),
            # Filter with alias
            (
                {
                    "filter": {
                        "conditions": ["TBL_A.col01 > 10", "TBL_B.col02 IS NOT NULL"],
                        "alias": "FILTERED_DATA",
                    }
                },
                "- Filter (alias: FILTERED_DATA):\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n",  # noqa: E501
            ),
        ],
    )
    def test_transformation_dict_to_string(transformation_dict, output_string):
>       assert transformation_dict_to_string(tf=transformation_dict) == output_string
E       AssertionError: assert '- Filter:\n ...IS NOT NULL\n' == '- Filter:\n ...IS NOT NULL\n'
E
E           - Filter:
E         -   - TBL_A.col01 > 10
E         ? -
E         +  - TBL_A.col01 > 10
E         -   - TBL_B.col02 IS NOT NULL
E         ? -
E         +  - TBL_B.col02 IS NOT NULL

test\test_transform\test_write_and_comment.py:167: AssertionError
_________________________________ test_transformation_dict_to_string[transformation_dict7-- Filter (alias: FILTERED_DATA):\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n] _________________________________ 

transformation_dict = {'filter': {'alias': 'FILTERED_DATA', 'conditions': ['TBL_A.col01 > 10', 'TBL_B.col02 IS NOT NULL']}}
output_string = '- Filter (alias: FILTERED_DATA):\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n'

    @pytest.mark.parametrize(
        ("transformation_dict", "output_string"),
        [
            (  # One join condition
                {
                    "join": {
                        "left_source": "TBL_D",
                        "right_source": "TBL_E",
                        "condition": ["TBL_D.a = TBL_E.b"],
                        "how": "left",
                    },
                },
                "- Join (left):\nTBL_D.a = TBL_E.b",
            ),
            (  # Multiple join conditions
                {
                    "join": {
                        "left_source": "TBL_D",
                        "right_source": "TBL_E",
                        "condition": ["TBL_D.a = TBL_E.b", "TBL_D.f||TBL_D.g = TBL_E.e"],
                        "how": "left",
                    },
                },
                "- Join (left):\n"
                "  - TBL_D.a = TBL_E.b\n"
                "  - TBL_D.f||TBL_D.g = TBL_E.e",
            ),
            (  # Aggregation
                {
                    "aggregation": {
                        "group": ["TBL_D.a"],
                        "column_mapping": {"count_TBL_E_b": "count(TBL_E.b)"},
                    }
                },
                "- Aggregate:\n"
                "  - group by ['TBL_D.a']\n"
                "  - count_TBL_E_b = count(TBL_E.b)\n",
            ),
            (  # Pivot
                {
                    "pivot": {
                        "group_cols": ["TBL_A.col01", "TBL_A.col02"],
                        "pivot_col": "TBL_B.col04",
                        "pivot_value_col": "TBL_A.col03",
                        "column_mapping": {"X": "min", "Y": "avg", "Z": "first"},
                    }
                },
                "- Pivot:\n"
                "  - group by ['TBL_A.col01', 'TBL_A.col02']\n"
                "  - pivot column TBL_B.col04\n"
                "  - values from column TBL_A.col03\n"
                "  - using values:\n"
                "    - min(X)\n"
                "    - avg(Y)\n"
                "    - first(Z)\n",
            ),
            # Add Variables
            (
                {
                    "add_variables": {
                        "column_mapping": {
                            "NewCol01": "TBLA.col1",
                            "NewCol02": "cast(TBLB.col2 as string)",
                            "NewCol03": "TBLA.col3 + TBLC.col03",
                        },
                    }
                },
                "- Variable:\n"
                "  - NewCol01 = TBLA.col1\n"
                "  - NewCol02 = cast(TBLB.col2 as string)\n"
                "  - NewCol03 = TBLA.col3 + TBLC.col03\n",
            ),
            # Union
            (
                {
                    "union": {
                        "alias": "TABLE_A_B",
                        "column_mapping": {
                            "TABLE_A": {"c01_ab": "c01a", "c02_ab": "c02a"},
                            "TABLE_B": {"c01_ab": "c01b", "c02_ab": "c02b"},
                        },
                    }
                },
                "- Union:\n"
                "  - TABLE_A_B:\n"
                "    - c01a as c01_ab, c02a as c02_ab FROM TABLE_A\n"
                "    - c01b as c01_ab, c02b as c02_ab FROM TABLE_B",
            ),
            # Filter without alias
            (
                {"filter": {"conditions": ["TBL_A.col01 > 10", "TBL_B.col02 IS NOT NULL"]}},
                "- Filter:\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n",
            ),
            # Filter with alias
            (
                {
                    "filter": {
                        "conditions": ["TBL_A.col01 > 10", "TBL_B.col02 IS NOT NULL"],
                        "alias": "FILTERED_DATA",
                    }
                },
                "- Filter (alias: FILTERED_DATA):\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n",  # noqa: E501
            ),
        ],
    )
    def test_transformation_dict_to_string(transformation_dict, output_string):
>       assert transformation_dict_to_string(tf=transformation_dict) == output_string
E       AssertionError: assert '- Filter (al...IS NOT NULL\n' == '- Filter (al...IS NOT NULL\n'
E
E           - Filter (alias: FILTERED_DATA):
E         -   - TBL_A.col01 > 10
E         ? -
E         +  - TBL_A.col01 > 10
E         -   - TBL_B.col02 IS NOT NULL
E         ? -
E         +  - TBL_B.col02 IS NOT NULL

test\test_transform\test_write_and_comment.py:167: AssertionError
================================================================================================ warnings summary ================================================================================================ 
..\bsrc-etl-2-venv\lib\site-packages\holidays\deprecations\v1_incompatibility.py:40
  C:\Users\B25712\bsrc-etl-venv\bsrc-etl-2-venv\lib\site-packages\holidays\deprecations\v1_incompatibility.py:40: FutureIncompatibilityWarning:

  This is a future version incompatibility warning from Holidays v0.62
  to inform you about an upcoming change in our API versioning strategy that may affect your
  project's dependencies. Starting from version 1.0 onwards, we will be following a loose form of
  Semantic Versioning (SemVer, https://semver.org) to provide clearer communication regarding any
  potential breaking changes.

  This means that while we strive to maintain backward compatibility, there might be occasional
  updates that introduce breaking changes to our API. To ensure the stability of your projects,
  we highly recommend pinning the version of our API that you rely on. You can pin your current
  holidays v0.x dependency (e.g., holidays==0.62) or limit it (e.g., holidays<1.0) in order to
  avoid potentially unwanted upgrade to the version 1.0 when it's released (ETA 2025Q1-Q2).

  If you have any questions or concerns regarding this change, please don't hesitate to reach out
  to us via https://github.com/vacanza/holidays/discussions/1800.

    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform win32, python 3.10.11-final-0 ----------
Name                                            Stmts   Miss  Cover   Missing
-----------------------------------------------------------------------------
src\__init__.py                                     0      0   100%
src\config\__init__.py                              0      0   100%
src\config\constants.py                             1      0   100%
src\config\exceptions.py                           12     12     0%   6-21
src\config\process.py                               4      4     0%   7-10
src\config\schema.py                                4      4     0%   3-52
src\dq\__init__.py                                  0      0   100%
src\dq\dq_validation.py                           141    132     6%   47-112, 166-181, 197-249, 265-286, 318-350, 372-392, 414-486
src\extract\__init__.py                             0      0   100%
src\extract\master_data_sql.py                    105     85    19%   27-29, 33-34, 38, 55-83, 104-126, 137-139, 149-151, 175, 209-218, 257-269, 293-320, 341-371
src\month_setup\__init__.py                         0      0   100%
src\month_setup\dial_derive_snapshotdate.py        32     27    16%   12-18, 28-37, 47-50, 69-85
src\month_setup\metadata_log_tables.py              1      0   100%
src\month_setup\setup_new_month.py                  1      1     0%   9
src\staging\__init__.py                             0      0   100%
src\staging\extract_dial_data.py                   98     98     0%   17-557
src\staging\status.py                              15     15     0%   4-30
src\transform\__init__.py                           0      0   100%
src\transform\table_write_and_comment.py           63      0   100%
src\transform\transform_business_logic_sql.py       6      6     0%   5-24
src\utils\__init__.py                               0      0   100%
src\utils\alias_util.py                            13     13     0%   10-109
src\utils\export_parquet.py                        11     11     0%   9-49
src\utils\get_catalog.py                            5      5     0%   6-20
src\utils\get_dbutils.py                            2      2     0%   4-6
src\utils\logging_util.py                           6      0   100%
src\utils\parameter_utils.py                       26     26     0%   5-123
src\utils\parse_yaml.py                            12     12     0%   9-31
src\utils\process_logging.py                       13     13     0%   9-60
src\utils\sources_util.py                          52     39    25%   40, 57, 69-70, 79-80, 92, 117-121, 133, 146-150, 160, 182-199, 207-224, 228-233, 237-239
src\utils\table_logging.py                         10     10     0%   8-40
src\utils\table_schema.py                           3      3     0%   8-16
src\validate\__init__.py                            0      0   100%
src\validate\base.py                                4      4     0%   4-7
src\validate\expressions.py                        24     24     0%   13-64
src\validate\run_all.py                             7      7     0%   11-44
src\validate\sources.py                            29     29     0%   7-67
src\validate\transformations.py                   170    170     0%   16-473
src\validate\validate_sql.py                       50     50     0%   12-115
src\validate\yaml.py                               18     18     0%   3-33
-----------------------------------------------------------------------------
TOTAL                                             938    820    13%
Coverage HTML written to dir htmlcov

============================================================================================ short test summary info =============================================================================================
FAILED test/test_transform/test_write_and_comment.py::test_transformation_dict_to_string[transformation_dict6-- Filter:\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n] - AssertionError: assert '- Filter:\n ...IS NOT NULL\n' == '- Filter:\n ...IS NOT NULL\n'
FAILED test/test_transform/test_write_and_comment.py::test_transformation_dict_to_string[transformation_dict7-- Filter (alias: FILTERED_DATA):\n  - TBL_A.col01 > 10\n  - TBL_B.col02 IS NOT NULL\n] - AssertionError: assert '- Filter (al...IS NOT NULL\n' == '- Filter (al...IS NOT NULL\n'
==================================================================================== 2 failed, 25 passed, 1 warning in 21.53s ==================================================================================== 
(bsrc-etl-2-venv) PS C:\Users\B25712\bsrc-etl-venv\bsrc-etl> SUCCESS: The process with PID 16788 (child process of PID 1884) has been terminated.
SUCCESS: The process with PID 1884 (child process of PID 18564) has been terminated.
SUCCESS: The process with PID 18564 (child process of PID 17420) has been terminated.