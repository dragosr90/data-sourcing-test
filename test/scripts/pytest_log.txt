(bsrc-etl-venv) PS C:\Users\B25712\bsrc-etl-venv\bsrc-etl> pytest test/scripts/test_nonssf_staging_process.py
===================================================================================== test session starts ======================================================================================
platform win32 -- Python 3.10.11, pytest-8.3.3, pluggy-1.5.0
rootdir: C:\Users\B25712\bsrc-etl-venv\bsrc-etl
configfile: pyproject.toml
plugins: cov-6.0.0, mock-3.14.0
collected 17 items

test\scripts\test_nonssf_staging_process.py .............F..F                                                                                                                             [100%]

=========================================================================================== FAILURES =========================================================================================== 
___________________________________________________________________ test_non_ssf_load_missing_critical_files_after_deadline ____________________________________________________________________ 

mock_spark = <MagicMock spec='SparkSession' id='1830057880368'>, mock_extraction = <MagicMock name='ExtractNonSSFData()' spec='ExtractNonSSFData' id='1830057914096'>
mock_write_to_log = <MagicMock name='write_to_log' id='1830057833712'>

    def test_non_ssf_load_missing_critical_files_after_deadline(
        mock_spark, mock_extraction, mock_write_to_log
    ):
        """Test scenario where critical files (NME/FINOB) are missing after deadline."""
        missing_files = [
            {
                "source_system": "NME",
                "file_name": "critical_file1",
                "deadline": "2024-01-01",
            },
            {
                "source_system": "FINOB",
                "file_name": "critical_file2",
                "deadline": "2024-01-02",
            },
        ]

        # Set up mock data with missing critical files
        files, _, _ = setup_mock_data(
            mock_extraction, missing_files=missing_files, has_critical_missing=True
        )

        # Process should fail when critical files are missing after deadline
        with pytest.raises(NonSSFExtractionError) as exc_info:
            non_ssf_load(mock_spark, run_month="202402", run_id=1)

        # Verify the error message contains info about missing files
        assert "Critical files missing after deadline" in str(exc_info.value)

        # Verify deadline checking was performed
        mock_extraction.check_missing_files_after_deadline.assert_called_once()
        mock_extraction.log_missing_files_errors.assert_called_once_with(missing_files)

        # Process should have started (+1) and then failed (+1) = 2 total
>       assert_write_to_log_calls(mock_write_to_log, started=1, completed=0, failed=1)

test\scripts\test_nonssf_staging_process.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  

mock_write_to_log = <MagicMock name='write_to_log' id='1830057833712'>, started = 1, failed = 1, completed = 0

    def assert_write_to_log_calls(
        mock_write_to_log, started: int, failed: int, completed: int
    ):
        appended_status = [
            c[1]["record"]["Status"] for c in mock_write_to_log.call_args_list
        ]
        assert len([s for s in appended_status if s == "Started"]) == started
>       assert len([s for s in appended_status if s == "Failed"]) == failed
E       AssertionError

test\scripts\assert_utils.py:45: AssertionError
_____________________________________________________________________ test_non_ssf_load_mixed_missing_files_after_deadline _____________________________________________________________________ 

mock_spark = <MagicMock spec='SparkSession' id='1830057351232'>, mock_extraction = <MagicMock name='ExtractNonSSFData()' spec='ExtractNonSSFData' id='1830057404560'>
mock_write_to_log = <MagicMock name='write_to_log' id='1830056841600'>

    def test_non_ssf_load_mixed_missing_files_after_deadline(
        mock_spark, mock_extraction, mock_write_to_log
    ):
        """Test scenario with both critical and non-critical files missing after
        deadline."""
        missing_files = [
            {
                "source_system": "LRD_STATIC",
                "file_name": "static_file1",
                "deadline": "2024-01-01",
            },
            {
                "source_system": "NME",
                "file_name": "critical_file1",
                "deadline": "2024-01-02",
            },
        ]

        # Set up mock data with mixed missing files
        files, _, _ = setup_mock_data(
            mock_extraction,
            missing_files=missing_files,
            has_critical_missing=True,  # Because NME is critical
        )

        # Process should fail because NME (critical) is missing
        with pytest.raises(NonSSFExtractionError) as exc_info:
            non_ssf_load(mock_spark, run_month="202402", run_id=1)

        # Verify the error message
        assert "Critical files missing after deadline" in str(exc_info.value)

        # Verify deadline checking was performed
        mock_extraction.check_missing_files_after_deadline.assert_called_once()
        mock_extraction.log_missing_files_errors.assert_called_once_with(missing_files)

        # Process should have started and then failed immediately
>       assert_write_to_log_calls(mock_write_to_log, started=1, completed=0, failed=1)

test\scripts\test_nonssf_staging_process.py:327:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  

mock_write_to_log = <MagicMock name='write_to_log' id='1830056841600'>, started = 1, failed = 1, completed = 0

    def assert_write_to_log_calls(
        mock_write_to_log, started: int, failed: int, completed: int
    ):
        appended_status = [
            c[1]["record"]["Status"] for c in mock_write_to_log.call_args_list
        ]
        assert len([s for s in appended_status if s == "Started"]) == started
>       assert len([s for s in appended_status if s == "Failed"]) == failed
E       AssertionError

test\scripts\assert_utils.py:45: AssertionError
======================================================================================= warnings summary ======================================================================================= 
..\bsrc-etl-venv\lib\site-packages\holidays\deprecations\v1_incompatibility.py:40
  C:\Users\B25712\bsrc-etl-venv\bsrc-etl-venv\lib\site-packages\holidays\deprecations\v1_incompatibility.py:40: FutureIncompatibilityWarning:

  This is a future version incompatibility warning from Holidays v0.62
  to inform you about an upcoming change in our API versioning strategy that may affect your
  project's dependencies. Starting from version 1.0 onwards, we will be following a loose form of
  Semantic Versioning (SemVer, https://semver.org) to provide clearer communication regarding any
  potential breaking changes.

  This means that while we strive to maintain backward compatibility, there might be occasional
  updates that introduce breaking changes to our API. To ensure the stability of your projects,
  we highly recommend pinning the version of our API that you rely on. You can pin your current
  holidays v0.x dependency (e.g., holidays==0.62) or limit it (e.g., holidays<1.0) in order to
  avoid potentially unwanted upgrade to the version 1.0 when it's released (ETA 2025Q1-Q2).

  If you have any questions or concerns regarding this change, please don't hesitate to reach out
  to us via https://github.com/vacanza/holidays/discussions/1800.

    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform win32, python 3.10.11-final-0 ----------
Name                                                             Stmts   Miss  Cover   Missing
----------------------------------------------------------------------------------------------
src\__init__.py                                                      0      0   100%
src\abnamro_bsrc_etl\__init__.py                                     0      0   100%
src\abnamro_bsrc_etl\config\__init__.py                              0      0   100%
src\abnamro_bsrc_etl\config\business_logic.py                       54      0   100%
src\abnamro_bsrc_etl\config\constants.py                             2      0   100%
src\abnamro_bsrc_etl\config\exceptions.py                           31      2    94%   66-71
src\abnamro_bsrc_etl\config\process.py                               7      0   100%
src\abnamro_bsrc_etl\config\schema.py                                5      5     0%   1-52
src\abnamro_bsrc_etl\dq\__init__.py                                  0      0   100%
src\abnamro_bsrc_etl\dq\dq_validation.py                           150    132    12%   47-112, 166-181, 197-249, 265-286, 318-350, 372-392, 414-486
src\abnamro_bsrc_etl\extract\__init__.py                             0      0   100%
src\abnamro_bsrc_etl\extract\master_data_sql.py                     96     71    26%   31-33, 37-38, 42, 59-88, 109-137, 149-156, 162-164, 188, 222-231, 285-300, 329-356
src\abnamro_bsrc_etl\month_setup\__init__.py                         0      0   100%
src\abnamro_bsrc_etl\month_setup\dial_derive_snapshotdate.py        36     27    25%   12-18, 28-37, 47-50, 69-85
src\abnamro_bsrc_etl\month_setup\metadata_log_tables.py             40     28    30%   23-84, 88-159, 166-203
src\abnamro_bsrc_etl\month_setup\setup_new_month.py                 29     29     0%   1-94
src\abnamro_bsrc_etl\scripts\__init__.py                             0      0   100%
src\abnamro_bsrc_etl\scripts\dial_check_delayed_files.py            27     27     0%   1-69
src\abnamro_bsrc_etl\scripts\dial_staging_process.py                65     65     0%   1-280
src\abnamro_bsrc_etl\scripts\export_tine_tables.py                   6      6     0%   1-9
src\abnamro_bsrc_etl\scripts\new_month_setup.py                      7      7     0%   1-18
src\abnamro_bsrc_etl\scripts\nonssf_staging_process.py              63      0   100%
src\abnamro_bsrc_etl\scripts\run_mapping.py                         26     26     0%   9-113
src\abnamro_bsrc_etl\scripts\ssf_staging_process.py                 58     58     0%   1-234
src\abnamro_bsrc_etl\staging\__init__.py                             0      0   100%
src\abnamro_bsrc_etl\staging\extract_base.py                        77     45    42%   73-83, 97, 107-113, 155-176, 205-219, 275-321, 343-352, 387-404, 420
src\abnamro_bsrc_etl\staging\extract_dial_data.py                   77     77     0%   1-360
src\abnamro_bsrc_etl\staging\extract_nonssf_data.py                149    120    19%   27, 38-55, 68-87, 108-130, 146-222, 234-283, 294-317, 330-377, 397-431, 446, 462, 485-507
src\abnamro_bsrc_etl\staging\extract_ssf_data.py                   177    177     0%   1-620
src\abnamro_bsrc_etl\staging\status.py                              58      5    91%   18, 53-54, 107, 151
src\abnamro_bsrc_etl\transform\__init__.py                           0      0   100%
src\abnamro_bsrc_etl\transform\table_write_and_comment.py           79     79     0%   1-237
src\abnamro_bsrc_etl\transform\transform_business_logic_sql.py       9      9     0%   1-25
src\abnamro_bsrc_etl\utils\__init__.py                               0      0   100%
src\abnamro_bsrc_etl\utils\alias_util.py                            18     18     0%   1-109
src\abnamro_bsrc_etl\utils\export_parquet.py                        22     12    45%   38-57, 67-68
src\abnamro_bsrc_etl\utils\get_dbutils.py                            3      1    67%   6
src\abnamro_bsrc_etl\utils\get_env.py                               12      6    50%   22-32, 48, 64, 84
src\abnamro_bsrc_etl\utils\logging_util.py                          10      0   100%
src\abnamro_bsrc_etl\utils\parameter_utils.py                       25     19    24%   33-53, 79-84, 105-116
src\abnamro_bsrc_etl\utils\parse_yaml.py                            28     28     0%   1-127
src\abnamro_bsrc_etl\utils\sources_util.py                          56     56     0%   1-218
src\abnamro_bsrc_etl\utils\table_logging.py                         19     11    42%   25-37, 54-56
src\abnamro_bsrc_etl\utils\table_schema.py                           6      6     0%   1-16
src\abnamro_bsrc_etl\utils\transformations_util.py                  20     12    40%   20-25, 39, 51, 65-68
src\abnamro_bsrc_etl\validate\__init__.py                            0      0   100%
src\abnamro_bsrc_etl\validate\base.py                                5      5     0%   1-7
src\abnamro_bsrc_etl\validate\expressions.py                        34     34     0%   1-75
src\abnamro_bsrc_etl\validate\run_all.py                            15     15     0%   1-48
src\abnamro_bsrc_etl\validate\sources.py                            33     33     0%   1-67
src\abnamro_bsrc_etl\validate\transformations.py                   200    200     0%   1-593
src\abnamro_bsrc_etl\validate\validate_sql.py                       63     63     0%   1-130
src\abnamro_bsrc_etl\validate\yaml.py                               19     19     0%   1-34
----------------------------------------------------------------------------------------------
TOTAL                                                             1916   1533    20%
Coverage HTML written to dir htmlcov

=================================================================================== short test summary info ==================================================================================== 
FAILED test/scripts/test_nonssf_staging_process.py::test_non_ssf_load_missing_critical_files_after_deadline - AssertionError
FAILED test/scripts/test_nonssf_staging_process.py::test_non_ssf_load_mixed_missing_files_after_deadline - AssertionError
=========================================================================== 2 failed, 15 passed, 1 warning in 4.61s ===========================================================================
