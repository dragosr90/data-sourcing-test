description: Preprocess FAIR data - Using minimum calculation period PER COMPONENT TYPE

target: bsrc_d.int_{{ RUN_MONTH }}.fair_turnover

sources:
  - alias: UCR_ACTUAL
    columns:
      - COMPANY_ID
      - RATING_ID
      - RATING_STATUS
      - PARENT_COMPANY_ID
      - LB_RATING_ID
    source: int_{{ RUN_MONTH }}.dial_fair_pd_ucr_actual
  
  - alias: PD_ITERATIONS
    columns:
      - RATING_ID
      - RECOMMENDED
      - ITERATION_NUMBER
    filter: RECOMMENDED = 'y'
    source: stg_{{ RUN_MONTH }}.dial_fair_pd_iterations
  
  - alias: MODEL_ESSENTIALS
    columns:
      - RATING_ID
      - CALCULATION_PERIOD_ID
      - MODEL_COMPONENT_ESSENTIAL_TYPE_CODE
      - MODEL_COMPONENT_ESSENTIAL_VALUE
      - MODEL_COMPONENT_ESSENTIAL_CATEGORY_VARIANT_ID
      - ITERATION_NUMBER
    filter: MODEL_COMPONENT_ESSENTIAL_TYPE_CODE IN ('CorrectedTotalAssets', 'TotalBalanceSheet', 'Assets', 'TotalAssets', 'TotalTurnoverTurnover', 'Turnover', 'Budget', 'Revenues', 'TotalRevenues', 'TotalOperatingIncome') AND MODEL_COMPONENT_ESSENTIAL_CATEGORY_VARIANT_ID = 'cons'
    source: stg_{{ RUN_MONTH }}.dial_fair_pd_model_component_essentials
  
  - alias: LBR_QUANTITATIVE
    columns:
      - LB_RATING_ID
      - DATA_TYPE
      - TOTAL_ASSETS
      - NET_INTEREST_YIELD
      - OTHER_OPERATING_INCOME
    filter: DATA_TYPE = 2
    source: stg_{{ RUN_MONTH }}.dial_fair_lbr_quantitative_input

transformations:
  # Step 1: Join iterations with model essentials
  - join:
      left_source: PD_ITERATIONS
      right_source: MODEL_ESSENTIALS
      condition:
        - PD_ITERATIONS.ITERATION_NUMBER = MODEL_ESSENTIALS.ITERATION_NUMBER
        - PD_ITERATIONS.RATING_ID = MODEL_ESSENTIALS.RATING_ID
      how: inner
  
  # Step 2: Find minimum calculation period PER component type and rating
  - aggregation:
      alias: MIN_PERIODS_PER_TYPE
      group:
        - PD_ITERATIONS.RATING_ID
        - MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE
      column_mapping:
        MIN_CALC_PERIOD: min(MODEL_ESSENTIALS.CALCULATION_PERIOD_ID)
  
  # Step 3: Join back to get values at minimum period per type
  - join:
      left_source: PD_ITERATIONS
      right_source: MIN_PERIODS_PER_TYPE
      condition:
        - PD_ITERATIONS.RATING_ID = MIN_PERIODS_PER_TYPE.RATING_ID
        - MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = MIN_PERIODS_PER_TYPE.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE
        - MODEL_ESSENTIALS.CALCULATION_PERIOD_ID = MIN_PERIODS_PER_TYPE.MIN_CALC_PERIOD
      how: inner
  
  # Step 4: Join with UCR actual data
  - join:
      right_source: UCR_ACTUAL
      condition:
        - PD_ITERATIONS.RATING_ID = UCR_ACTUAL.RATING_ID
      how: left
  
  # Step 5: Aggregate to get one value per rating/component type
  - aggregation:
      alias: RATING_ESSENTIALS
      group:
        - UCR_ACTUAL.RATING_ID
        - UCR_ACTUAL.COMPANY_ID
        - UCR_ACTUAL.PARENT_COMPANY_ID
        - UCR_ACTUAL.LB_RATING_ID
      column_mapping:
        # Now each component will have its own minimum period value
        CorrectedTotalAssets: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'CorrectedTotalAssets' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        TotalBalanceSheet: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalBalanceSheet' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        Assets: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'Assets' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        TotalAssets: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalAssets' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        TotalTurnoverTurnover: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalTurnoverTurnover' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        Turnover: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'Turnover' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        Budget: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'Budget' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        Revenues: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'Revenues' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        TotalRevenues: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalRevenues' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        TotalOperatingIncome: first(CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalOperatingIncome' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END)
        # RDF uses CorrectedTotalAssets for assets, Turnover for turnover
        TotalAssets_calc: first(COALESCE(
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'CorrectedTotalAssets' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END,
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalAssets' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END,
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalBalanceSheet' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END,
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'Assets' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END
          ))
        Turnover_calc: first(COALESCE(
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'Turnover' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END,
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalTurnoverTurnover' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END,
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'Budget' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END,
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'Revenues' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END,
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalRevenues' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END,
          CASE WHEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE = 'TotalOperatingIncome' THEN MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE END
          ))
  
  # Step 6: Create parent data by aggregating by company
  - aggregation:
      alias: PARENT_DATA
      source: RATING_ESSENTIALS
      group:
        - RATING_ESSENTIALS.COMPANY_ID
      column_mapping:
        Parent_RATING_ID: first(RATING_ESSENTIALS.RATING_ID)
        Parent_TotalAssets: first(RATING_ESSENTIALS.TotalAssets_calc)
        Parent_Turnover: first(RATING_ESSENTIALS.Turnover_calc)
  
  # Step 7: Join parent data back
  - join:
      left_source: RATING_ESSENTIALS
      right_source: PARENT_DATA
      condition:
        - RATING_ESSENTIALS.PARENT_COMPANY_ID = PARENT_DATA.COMPANY_ID
      how: left
  
  # Step 8: Join with LBR data
  - join:
      right_source: LBR_QUANTITATIVE
      condition:
        - RATING_ESSENTIALS.LB_RATING_ID = LBR_QUANTITATIVE.LB_RATING_ID
      how: left

expressions:
  RatingID: RATING_ESSENTIALS.RATING_ID
  ParentRatingID: PARENT_DATA.Parent_RATING_ID
  LBRatingID: LBR_QUANTITATIVE.LB_RATING_ID
  # Hierarchy: Direct → Parent → LBR
  AnnualTurnover: COALESCE(
    RATING_ESSENTIALS.Turnover_calc,
    PARENT_DATA.Parent_Turnover,
    CASE WHEN LBR_QUANTITATIVE.NET_INTEREST_YIELD IS NOT NULL AND LBR_QUANTITATIVE.OTHER_OPERATING_INCOME IS NOT NULL 
    THEN CAST((LBR_QUANTITATIVE.NET_INTEREST_YIELD + LBR_QUANTITATIVE.OTHER_OPERATING_INCOME) * 1000000000 AS STRING) END
    )
  AnnualTurnoverDirect: RATING_ESSENTIALS.Turnover_calc
  AnnualTurnoverParent: PARENT_DATA.Parent_Turnover
  AnnualTurnoverLBR: CASE WHEN LBR_QUANTITATIVE.NET_INTEREST_YIELD IS NOT NULL AND LBR_QUANTITATIVE.OTHER_OPERATING_INCOME IS NOT NULL THEN CAST((LBR_QUANTITATIVE.NET_INTEREST_YIELD + LBR_QUANTITATIVE.OTHER_OPERATING_INCOME) * 1000000000 AS STRING) END
  TotalAssets: COALESCE(
    RATING_ESSENTIALS.TotalAssets_calc,
    PARENT_DATA.Parent_TotalAssets,
    CASE WHEN LBR_QUANTITATIVE.TOTAL_ASSETS IS NOT NULL 
    THEN CAST(LBR_QUANTITATIVE.TOTAL_ASSETS * 1000000000 AS STRING) END
    )
  TotalAssetsDirect: RATING_ESSENTIALS.TotalAssets_calc
  TotalAssetsParent: PARENT_DATA.Parent_TotalAssets
  TotalAssetsLBR: CASE WHEN LBR_QUANTITATIVE.TOTAL_ASSETS IS NOT NULL THEN CAST(LBR_QUANTITATIVE.TOTAL_ASSETS * 1000000000 AS STRING) END

drop_duplicates: true
