description: Pipeline to preprocess FAIR data to get turnover and total asset values per rating ID

target: bsrc_d.int_{{ RUN_MONTH }}.fair_turnover

sources:
  - alias: UCR_ACTUAL
    columns:
      - COMPANY_ID
      - RATING_ID
      - RATING_STATUS
      - PARENT_COMPANY_ID
      - LB_RATING_ID
    source: int_{{ RUN_MONTH }}.pd_ucr_actual
  
  - alias: PD_ITERATIONS
    columns:
      - RATING_ID
      - RECOMMENDED
      - ITERATION_NUMBER
    filter: RECOMMENDED = 'y'
    source: stg_{{ RUN_MONTH }}.dial_fair_pd_iterations
  
  - alias: MODEL_ESSENTIALS
    columns:
      - RATING_ID
      - CALCULATION_PERIOD_ID
      - MODEL_COMPONENT_ESSENTIAL_TYPE_CODE
      - MODEL_COMPONENT_ESSENTIAL_VALUE
      - MODEL_COMPONENT_ESSENTIAL_CATEGORY_VARIANT_ID
      - ITERATION_NUMBER
    filter: MODEL_COMPONENT_ESSENTIAL_TYPE_CODE IN ('CorrectedTotalAssets', 'TotalBalanceSheet', 'Assets', 'TotalAssets', 'TotalTurnoverTurnover', 'Turnover', 'Budget', 'Revenues', 'TotalRevenues', 'TotalOperatingIncome') AND MODEL_COMPONENT_ESSENTIAL_CATEGORY_VARIANT_ID = 'cons'
    source: stg_{{ RUN_MONTH }}.dial_fair_pd_model_component_essentials
  
  - alias: LBR_QUANTITATIVE
    columns:
      - LB_RATING_ID
      - DATA_TYPE
      - TOTAL_ASSETS
      - NET_INTEREST_YIELD
      - OTHER_OPERATING_INCOME
    filter: DATA_TYPE = 2
    source: stg_{{ RUN_MONTH }}.dial_fair_lbr_quantitative_input

transformations:
  # Step 1: Join iterations with model essentials on ITERATION_NUMBER to select only recommended iterations
  - join:
      left_source: MODEL_ESSENTIALS
      right_source: PD_ITERATIONS
      condition:
        - MODEL_ESSENTIALS.RATING_ID = PD_ITERATIONS.RATING_ID
        - MODEL_ESSENTIALS.ITERATION_NUMBER = PD_ITERATIONS.ITERATION_NUMBER
      how: inner
  
  # Step 2: Join with UCR actual data
  - join:
      right_source: UCR_ACTUAL
      condition:
        - MODEL_ESSENTIALS.RATING_ID = UCR_ACTUAL.RATING_ID
      how: inner
  
  # Step 3: Pivot the MODEL_COMPONENT_ESSENTIAL_TYPE_CODE values to columns
  - pivot:
      alias: PIVOTED_ESSENTIALS
      group_cols:
        - UCR_ACTUAL.RATING_ID
        - UCR_ACTUAL.COMPANY_ID
        - UCR_ACTUAL.PARENT_COMPANY_ID
        - UCR_ACTUAL.LB_RATING_ID
      pivot_col: MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_TYPE_CODE
      pivot_value_col: MODEL_ESSENTIALS.MODEL_COMPONENT_ESSENTIAL_VALUE
      column_mapping:
        CorrectedTotalAssets: max
        TotalBalanceSheet: max
        Assets: max
        TotalAssets: max
        TotalTurnoverTurnover: max
        Turnover: max
        Budget: max
        Revenues: max
        TotalRevenues: max
        TotalOperatingIncome: max
  
  # Step 4: Create aggregation to be used as parent data source
  # This creates PARENT_DATA alias from PIVOTED_ESSENTIALS
  - aggregation:
      source: PIVOTED_ESSENTIALS
      alias: PARENT_DATA
      group:
        - PIVOTED_ESSENTIALS.COMPANY_ID
      column_mapping:
        Parent_RATING_ID: max(PIVOTED_ESSENTIALS.RATING_ID)
        Parent_TotalAssets: max(COALESCE(PIVOTED_ESSENTIALS.CorrectedTotalAssets, PIVOTED_ESSENTIALS.TotalBalanceSheet, PIVOTED_ESSENTIALS.Assets, PIVOTED_ESSENTIALS.TotalAssets))
        Parent_Turnover: max(COALESCE(PIVOTED_ESSENTIALS.TotalTurnoverTurnover, PIVOTED_ESSENTIALS.Turnover, PIVOTED_ESSENTIALS.Budget, PIVOTED_ESSENTIALS.Revenues, PIVOTED_ESSENTIALS.TotalRevenues, PIVOTED_ESSENTIALS.TotalOperatingIncome))
  
  # Step 5: Self join on Direct.PARENT_COMPANY_ID = Parent.COMPANY_ID
  - join:
      left_source: PIVOTED_ESSENTIALS
      right_source: PARENT_DATA
      condition:
        - PIVOTED_ESSENTIALS.PARENT_COMPANY_ID = PARENT_DATA.COMPANY_ID
      how: left
  
  # Step 6-7: Join with LBR data
  - join:
      right_source: LBR_QUANTITATIVE
      condition:
        - PIVOTED_ESSENTIALS.LB_RATING_ID = LBR_QUANTITATIVE.LB_RATING_ID
      how: left

expressions:
  RatingID: PIVOTED_ESSENTIALS.RATING_ID
  ParentRatingID: PARENT_DATA.Parent_RATING_ID
  LBRatingID: LBR_QUANTITATIVE.LB_RATING_ID
  AnnualTurnover: COALESCE(CASE WHEN LBR_QUANTITATIVE.NET_INTEREST_YIELD IS NOT NULL AND LBR_QUANTITATIVE.OTHER_OPERATING_INCOME IS NOT NULL THEN CAST((LBR_QUANTITATIVE.NET_INTEREST_YIELD + LBR_QUANTITATIVE.OTHER_OPERATING_INCOME) * 1000000000 AS STRING) END, PARENT_DATA.Parent_Turnover, COALESCE(PIVOTED_ESSENTIALS.TotalTurnoverTurnover, PIVOTED_ESSENTIALS.Turnover, PIVOTED_ESSENTIALS.Budget, PIVOTED_ESSENTIALS.Revenues, PIVOTED_ESSENTIALS.TotalRevenues, PIVOTED_ESSENTIALS.TotalOperatingIncome))
  AnnualTurnoverDirect: COALESCE(PIVOTED_ESSENTIALS.TotalTurnoverTurnover, PIVOTED_ESSENTIALS.Turnover, PIVOTED_ESSENTIALS.Budget, PIVOTED_ESSENTIALS.Revenues, PIVOTED_ESSENTIALS.TotalRevenues, PIVOTED_ESSENTIALS.TotalOperatingIncome)
  AnnualTurnoverParent: PARENT_DATA.Parent_Turnover
  AnnualTurnoverLBR: CASE WHEN LBR_QUANTITATIVE.NET_INTEREST_YIELD IS NOT NULL AND LBR_QUANTITATIVE.OTHER_OPERATING_INCOME IS NOT NULL THEN CAST((LBR_QUANTITATIVE.NET_INTEREST_YIELD + LBR_QUANTITATIVE.OTHER_OPERATING_INCOME) * 1000000000 AS STRING) END
  TotalAssets: COALESCE(CASE WHEN LBR_QUANTITATIVE.TOTAL_ASSETS IS NOT NULL THEN CAST(LBR_QUANTITATIVE.TOTAL_ASSETS * 1000000000 AS STRING) END, PARENT_DATA.Parent_TotalAssets, COALESCE(PIVOTED_ESSENTIALS.CorrectedTotalAssets, PIVOTED_ESSENTIALS.TotalBalanceSheet, PIVOTED_ESSENTIALS.Assets, PIVOTED_ESSENTIALS.TotalAssets))
  TotalAssetsDirect: COALESCE(PIVOTED_ESSENTIALS.CorrectedTotalAssets, PIVOTED_ESSENTIALS.TotalBalanceSheet, PIVOTED_ESSENTIALS.Assets, PIVOTED_ESSENTIALS.TotalAssets)
  TotalAssetsParent: PARENT_DATA.Parent_TotalAssets
  TotalAssetsLBR: CASE WHEN LBR_QUANTITATIVE.TOTAL_ASSETS IS NOT NULL THEN CAST(LBR_QUANTITATIVE.TOTAL_ASSETS * 1000000000 AS STRING) END

drop_duplicates: true
