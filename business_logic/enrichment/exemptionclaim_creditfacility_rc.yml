description: The exemption claim is used to identify the regulatory approach that applies to an exposure. There are "exemptions" that are prescribed by the regulation in the CRR Article 150, however, institutions can also ask permission to move specific portfolios to less sophisticated approaches (both SA and FIRB). The reference table 1286 contains a set of exemption conditions which rely on different sourced attributes that are used to define the portfolios eligible for the application of both i) the prescribed regulatory PPUs portfolios and ii) the additional requested portfolios. This exemption claim will first be checked at Counterparty level and then at facility level and product level. This YAML is to determine exemption at credit facility level for RC.

target: enrich_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_exemptionclaim_creditfacility_rc

sources:
  # Main facility data source - already includes CounterpartyID and CounterpartySourceSystemIdentifier
  - alias: CF
    columns:
    - DeliveryEntity
    - ReportingDate
    - ReportingEntity
    - LocalFacilityIdentifier
    - SourceSystemIdentifier
    - CounterpartyID
    - CounterpartySourceSystemIdentifier
    - BaselIIProductType
    - PlNplIndicator
    - ProductProgram
    - SpecialisedLendingType
    - ExemptionFromAdvancedInternalRatingBasedApproach
    - SubFacilityFlag
    filter: SubFacilityFlag = 'N'
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_integrated_creditfacility

  # Credit facility links for counterparty hierarchy
  - alias: INT_CF_LINKS
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_integrated_creditfacility_links

  # SSF Counterparty data for Basel calculations
  - alias: INT_CP
    columns:
    - LocalId
    - SourceSystemIdentifier
    - GlobalCounterpartyIdentifier
    - BaselIICounterpartyType
    - ExemptionFromAdvancedInternalRatingBasedApproach
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_integrated_counterparty

  # Exemption mapping table (1286) for RC
  - alias: EXMP_1286
    source: stg_{{ RUN_MONTH }}.bsl_andes_1286_b2_exmp_cond #TODO: confirm RC table name

  # PD UCR integration data
  - alias: PD_UCR
    columns:
    - CounterpartyID
    - CounterpartySourceSystemIdentifier
    - PDModelCode
    - LastPerformingPDModelCode
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_pd_ucr_step3

  # Intercompany flag data
  - alias: IC
    columns:
    - CounterpartyID
    - CounterpartySourceSystemIdentifier
    - InterCompanyFlag
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_intercompany

  # LGD model data
  - alias: LGD
    columns:
    - CreditFacilityID
    - CreditFacilitySourceSystemIdentifier
    - LGDModelCode
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_lgd

  # Counterparty level exemption claim RC
  - alias: EXMP_CP_RC
    source: enrich_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_exemptionclaim_counterparty_rc

transformations:
  # Join with INT_CP to get counterparty data
  - join:
      left_source: CF
      right_source: INT_CP
      condition:
        - CF.CounterpartyID = INT_CP.LocalId
        - CF.CounterpartySourceSystemIdentifier = INT_CP.SourceSystemIdentifier
      how: left

  # Join with PD UCR data
  - join:
      right_source: PD_UCR
      condition:
        - CF.CounterpartyID = PD_UCR.CounterpartyID
        - CF.CounterpartySourceSystemIdentifier = PD_UCR.CounterpartySourceSystemIdentifier
      how: left

  # Join with intercompany flag
  - join:
      right_source: IC
      condition:
        - CF.CounterpartyID = IC.CounterpartyID
        - CF.CounterpartySourceSystemIdentifier = IC.CounterpartySourceSystemIdentifier
      how: left

  # Join with LGD data
  - join:
      right_source: LGD
      condition:
        - CF.LocalFacilityIdentifier = LGD.CreditFacilityID
        - CF.SourceSystemIdentifier = LGD.CreditFacilitySourceSystemIdentifier
      how: left

  # Join with exemption mapping table RC for facility level
  - join:
      right_source: EXMP_1286
      condition:
        - EXMP_1286.reporting_entity_id = CF.ReportingEntity or EXMP_1286.reporting_entity_id = '*'
        - EXMP_1286.b2_pd_type_id = CF.BaselIIProductType or EXMP_1286.b2_pd_type_id = '*'
        - EXMP_1286.lgd_rtg_model = LGD.LGDModelCode or EXMP_1286.lgd_rtg_model = '*'
        - EXMP_1286.pl_npl_indicator = CF.PlNplIndicator or EXMP_1286.pl_npl_indicator = '*'
        - EXMP_1286.specialised_lending_type = CF.SpecialisedLendingType or EXMP_1286.specialised_lending_type = '*'
        - EXMP_1286.cr_pd_program = CF.ProductProgram or EXMP_1286.cr_pd_program = '*'
        - EXMP_1286.pd_rtg_model = PD_UCR.PDModelCode or EXMP_1286.pd_rtg_model = PD_UCR.LastPerformingPDModelCode or EXMP_1286.pd_rtg_model = '*'
        - EXMP_1286.b2_cpty_type_id = INT_CP.BaselIICounterpartyType or EXMP_1286.b2_cpty_type_id = '*'
        - EXMP_1286.intercompany_flag = IC.InterCompanyFlag = 'Y' or EXMP_1286.intercompany_flag = '*'
        - upper(EXMP_1286.sourced_exemption_id) = upper(coalesce(CF.ExemptionFromAdvancedInternalRatingBasedApproach, INT_CP.ExemptionFromAdvancedInternalRatingBasedApproach)) or EXMP_1286.sourced_exemption_id = '*'
        - (EXMP_1286.ctpty_ssc || EXMP_1286.ctpty_uid = INT_CP.LocalId) OR
          (EXMP_1286.ctpty_ssc = 'EPR' and ltrim('0', EXMP_1286.ctpty_uid) = ltrim('0', INT_CP.GlobalCounterpartyIdentifier)) OR  
          (EXMP_1286.ctpty_uid = '*')
      how: left
  
  - add_variables:
      column_mapping:
        var_lowest_ExemptionClaimConditonID_FAC_RC: min(EXMP_1286.exemption_condition_id) OVER (PARTITION BY CF.LocalFacilityIdentifier)

  # To get Lowest Exemption Condition ID on Counterparty level RC
  - join:
      right_source: INT_CF_LINKS
      condition:
        - CF.LocalFacilityIdentifier = INT_CF_LINKS.CreditFacility
        - CF.SourceSystemIdentifier = INT_CF_LINKS.CreditFacilitySourceSystemIdentifier
      how: left
  
  - join:
      right_source: EXMP_CP_RC
      alias: JOINED_WITH_CP_RC
      condition:
        - INT_CF_LINKS.ParticipatingCounterparty = EXMP_CP_RC.CounterpartyID
        - INT_CF_LINKS.ParticipatingCounterpartySourceSystemIdentifier = EXMP_CP_RC.CounterpartySourceSystemIdentifier
      how: left
  
  - add_variables:
      column_mapping:
        var_lowest_ExemptionClaimConditonID_CP_RC: min(JOINED_WITH_CP_RC.ExemptionConditionIdRC) OVER (PARTITION BY JOINED_WITH_CP_RC.CreditFacility)

expressions:
  DeliveryEntity: JOINED_WITH_CP_RC.DeliveryEntity
  ReportingDate: JOINED_WITH_CP_RC.ReportingDate
  ReportingEntity: JOINED_WITH_CP_RC.ReportingEntity
  CreditFacilityID: JOINED_WITH_CP_RC.LocalFacilityIdentifier
  CreditFacilitySourceSystemIdentifier: JOINED_WITH_CP_RC.SourceSystemIdentifier
  CounterpartyID: JOINED_WITH_CP_RC.CounterpartyID
  CounterpartySourceSystemIdentifier: JOINED_WITH_CP_RC.CounterpartySourceSystemIdentifier
  BaselProductType: JOINED_WITH_CP_RC.BaselIIProductType
  PlNplIndicator: JOINED_WITH_CP_RC.PlNplIndicator
  SpecialisedLendingType: JOINED_WITH_CP_RC.SpecialisedLendingType
  SourcedExemptionId: JOINED_WITH_CP_RC.ExemptionFromAdvancedInternalRatingBasedApproach
  PDModelCode: JOINED_WITH_CP_RC.PDModelCode
  LastPerformingPDModelCode: JOINED_WITH_CP_RC.LastPerformingPDModelCode
  InterCompanyFlag: JOINED_WITH_CP_RC.InterCompanyFlag
  LGDModelCode: JOINED_WITH_CP_RC.LGDModelCode
  BaselCreditRiskApproach: coalesce( 
    case when least(JOINED_WITH_CP_RC.exemption_condition_id, var_lowest_ExemptionClaimConditonID_CP_RC) = var_lowest_ExemptionClaimConditonID_CP_RC 
         then JOINED_WITH_CP_RC.BaselCreditRiskApproach 
    end,
    case when JOINED_WITH_CP_RC.basel_approach='STD' then 'SA'
         when JOINED_WITH_CP_RC.basel_approach='FOU' then 'FIRB'
         when JOINED_WITH_CP_RC.basel_approach='IRB' then 'AIRB'
         else JOINED_WITH_CP_RC.basel_approach
    end
    )
  ExemptionConditionIdRC: least(JOINED_WITH_CP_RC.exemption_condition_id, var_lowest_ExemptionClaimConditonID_CP_RC)
  ExemptionIdRC: coalesce(
    case when least(JOINED_WITH_CP_RC.exemption_condition_id, var_lowest_ExemptionClaimConditonID_CP_RC) = var_lowest_ExemptionClaimConditonID_CP_RC 
         then JOINED_WITH_CP_RC.ExemptionIdRC 
    end,
    JOINED_WITH_CP_RC.exemption_id
    )
  ExemptionNameRC: coalesce(
    case when least(JOINED_WITH_CP_RC.exemption_condition_id, var_lowest_ExemptionClaimConditonID_CP_RC) = var_lowest_ExemptionClaimConditonID_CP_RC 
         then JOINED_WITH_CP_RC.ExemptionNameRC 
    end,
    JOINED_WITH_CP_RC.exemption_name
    )
  ExemptionTypeRC: coalesce(
    case when least(JOINED_WITH_CP_RC.exemption_condition_id, var_lowest_ExemptionClaimConditonID_CP_RC) = var_lowest_ExemptionClaimConditonID_CP_RC 
         then JOINED_WITH_CP_RC.ExemptionTypeRC 
    end,
    case when JOINED_WITH_CP_RC.exemption_end_date= '9999-12-31' then 'P' else 'T' end
    )

filter_target:
- JOINED_WITH_CP_RC.exemption_condition_id is not null or var_lowest_ExemptionClaimConditonID_CP_RC is not null
- ExemptionConditionIdRC = var_lowest_ExemptionClaimConditonID_FAC_RC or ExemptionConditionIdRC = var_lowest_ExemptionClaimConditonID_CP_RC

drop_duplicates: true
