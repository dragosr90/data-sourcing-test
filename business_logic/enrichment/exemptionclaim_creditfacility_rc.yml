description: The exemption claim is used to identify the regulatory approach that applies to an exposure. There are "exemptions" that are prescribed by the regulation in the CRR Article 150, however, institutions can also ask permission to move specific portfolios to less sophisticated approaches (both SA and FIRB). The reference table 1286 contains a set of exemption conditions which rely on different sourced attributes that are used to define the portfolios eligible for the application of both i) the prescribed regulatory PPUs portfolios and ii) the additional requested portfolios. This exemption claim will first be checked at Counterparty level and then at facility level and product level. This YAML is to determine exemption at credit facility level for RC.

target: enrich_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_exemptionclaim_creditfacility_rc

sources:
  # Main facility data source - already includes CounterpartyID and CounterpartySourceSystemIdentifier
  - alias: CF
    columns:
    - DeliveryEntity
    - ReportingDate
    - ReportingEntity
    - LocalFacilityIdentifier
    - SourceSystemIdentifier
    - CounterpartyID
    - CounterpartySourceSystemIdentifier
    - BaselIIProductType
    - PlNplIndicator
    - ProductProgram
    - SpecialisedLendingType
    - ExemptionFromAdvancedInternalRatingBasedApproach
    - SubFacilityFlag
    filter: SubFacilityFlag = 'N'
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_integrated_creditfacility

  # Credit facility links for counterparty hierarchy
  - alias: INT_CF_LINKS
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_integrated_creditfacility_links

  # SSF Counterparty data for Basel calculations
  - alias: INT_CP
    columns:
    - DeliveryEntity
    - ReportingDate
    - LocalId
    - SourceSystemIdentifier
    - GlobalCounterpartyIdentifier
    - BaselIICounterpartyType
    - ExemptionFromAdvancedInternalRatingBasedApproach
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_integrated_counterparty

  # Exemption mapping table (1286) for RC
  - alias: 1286EXMP_RC
    source: stg_{{ RUN_MONTH }}.bsl_andes_1286_b2_exmp_cond_rc #TODO: confirm RC table name

  # PD UCR integration data
  - alias: PD_UCR
    columns:
    - CounterpartyID
    - CounterpartySourceSystemIdentifier
    - PDModelCode
    - LastPerformingPDModelCode
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_pd_ucr_step3

  # Intercompany flag data
  - alias: IC
    columns:
    - CounterpartyID
    - CounterpartySourceSystemIdentifier
    - InterCompanyFlag
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_intercompany

  # LGD model data
  - alias: LGD
    columns:
    - CreditFacilityID
    - CreditFacilitySourceSystemIdentifier
    - CounterpartyID
    - CounterpartySourceSystemIdentifier
    - LGDModelCode
    source: int_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_lgd

  # Counterparty level exemption claim RC
  - alias: EXMP_CP_RC
    source: enrich_{{ RUN_MONTH }}.{{ DELIVERY_ENTITY }}_exemptionclaim_counterparty_rc

transformations:
  # Join with INT_CP to get counterparty data
  - join:
      left_source: CF
      right_source: INT_CP
      condition:
        - CF.CounterpartyID = INT_CP.LocalId
        - CF.CounterpartySourceSystemIdentifier = INT_CP.SourceSystemIdentifier
      how: left

  # Join with PD UCR data
  - join:
      right_source: PD_UCR
      condition:
        - CF.CounterpartyID = PD_UCR.CounterpartyID
        - CF.CounterpartySourceSystemIdentifier = PD_UCR.CounterpartySourceSystemIdentifier
      how: left

  # Join with intercompany flag
  - join:
      right_source: IC
      condition:
        - CF.CounterpartyID = IC.CounterpartyID
        - CF.CounterpartySourceSystemIdentifier = IC.CounterpartySourceSystemIdentifier
      how: left

  # Join with LGD data
  - join:
      right_source: LGD
      condition:
        - CF.LocalFacilityIdentifier = LGD.CreditFacilityID
        - CF.SourceSystemIdentifier = LGD.CreditFacilitySourceSystemIdentifier
      how: left

  # Join with exemption mapping table RC for facility level
  - join:
      right_source: 1286EXMP_RC
      alias: EXMP_FAC_RC
      condition:
        - 1286EXMP_RC.reporting_entity_id = CF.ReportingEntity or 1286EXMP_RC.reporting_entity_id = '*'
        - 1286EXMP_RC.b2_pd_type_id = CF.BaselIIProductType or 1286EXMP_RC.b2_pd_type_id = '*'
        - 1286EXMP_RC.lgd_rtg_model = LGD.LGDModelCode or 1286EXMP_RC.lgd_rtg_model = '*'
        - 1286EXMP_RC.pl_npl_indicator = CF.PlNplIndicator or 1286EXMP_RC.pl_npl_indicator = '*'
        - 1286EXMP_RC.specialised_lending_type = CF.SpecialisedLendingType or 1286EXMP_RC.specialised_lending_type = '*'
        - 1286EXMP_RC.cr_pd_program = CF.ProductProgram or 1286EXMP_RC.cr_pd_program = '*'
        - 1286EXMP_RC.pd_rtg_model = PD_UCR.PDModelCode or 1286EXMP_RC.pd_rtg_model = PD_UCR.LastPerformingPDModelCode or 1286EXMP_RC.pd_rtg_model = '*'
        - 1286EXMP_RC.b2_cpty_type_id = INT_CP.BaselIICounterpartyType or 1286EXMP_RC.b2_cpty_type_id = '*'
        - 1286EXMP_RC.intercompany_flag = IC.InterCompanyFlag = 'Y' or 1286EXMP_RC.intercompany_flag = '*'
        - upper(1286EXMP_RC.sourced_exemption_id) = upper(coalesce(CF.ExemptionFromAdvancedInternalRatingBasedApproach, INT_CP.ExemptionFromAdvancedInternalRatingBasedApproach)) or 1286EXMP_RC.sourced_exemption_id = '*'
        - (1286EXMP_RC.ctpty_ssc || 1286EXMP_RC.ctpty_uid = INT_CP.LocalId) OR
          (1286EXMP_RC.ctpty_ssc = 'EPR' and ltrim('0', 1286EXMP_RC.ctpty_uid) = ltrim('0', INT_CP.GlobalCounterpartyIdentifier)) OR  
          (1286EXMP_RC.ctpty_uid = '*')
      how: left
  
  - add_variables:
      column_mapping:
        var_lowest_ExemptionClaimConditonID_FAC_RC: min(EXMP_FAC_RC.exemption_condition_id) OVER (PARTITION BY CF.LocalFacilityIdentifier)

  # To get Lowest Exemption Condition ID on Counterparty level RC
  - join:
      left_source: INT_CF_LINKS
      right_source: EXMP_CP_RC
      condition:
        - INT_CF_LINKS.ParticipatingCounterparty = EXMP_CP_RC.CounterpartyID
        - INT_CF_LINKS.ParticipatingCounterpartySourceSystemIdentifier = EXMP_CP_RC.CounterpartySourceSystemIdentifier
      how: inner
  
  - add_variables:
      column_mapping:
        rank_num_Processid_RC: ROW_NUMBER() OVER (
            PARTITION BY INT_CF_LINKS.CreditFacility, INT_CF_LINKS.CreditFacilitySourceSystemIdentifier
            ORDER BY EXMP_CP_RC.ExemptionConditionIdRC
          )
  
  - filter:
      alias: EXMP_CP_RC_LOWEST
      conditions:
        - rank_num_Processid_RC = 1
  
  - join:
      right_source: EXMP_CP_RC_LOWEST
      condition:
        - CF.LocalFacilityIdentifier = EXMP_CP_RC_LOWEST.CreditFacility
        - CF.SourceSystemIdentifier = EXMP_CP_RC_LOWEST.CreditFacilitySourceSystemIdentifier
      how: left

expressions:
  DeliveryEntity: CF.DeliveryEntity
  ReportingDate: CF.ReportingDate
  ReportingEntity: CF.ReportingEntity
  CreditFacilityID: CF.LocalFacilityIdentifier
  CreditFacilitySourceSystemIdentifier: CF.SourceSystemIdentifier
  CounterpartyID: CF.CounterpartyID
  CounterpartySourceSystemIdentifier: CF.CounterpartySourceSystemIdentifier
  BaselProductType: CF.BaselIIProductType
  PlNplIndicator: CF.PlNplIndicator
  SpecialisedLendingType: CF.SpecialisedLendingType
  SourcedExemptionId: CF.ExemptionFromAdvancedInternalRatingBasedApproach
  PDModelCode: PD_UCR.PDModelCode
  LastPerformingPDModelCode: PD_UCR.LastPerformingPDModelCode
  InterCompanyFlag: IC.InterCompanyFlag
  LGDModelCode: LGD.LGDModelCode
  BaselCreditRiskApproach: coalesce( 
    case when least(EXMP_FAC_RC.exemption_condition_id, EXMP_CP_RC_LOWEST.ExemptionConditionIdRC) = EXMP_CP_RC_LOWEST.ExemptionConditionIdRC 
         then EXMP_CP_RC_LOWEST.BaselCreditRiskApproach 
    end,
    case when EXMP_FAC_RC.basel_approach='STD' then 'SA'
         when EXMP_FAC_RC.basel_approach='FOU' then 'FIRB'
         when EXMP_FAC_RC.basel_approach='IRB' then 'AIRB'
         else EXMP_FAC_RC.basel_approach
    end
  )
  ExemptionConditionIdRC: least(EXMP_FAC_RC.exemption_condition_id, EXMP_CP_RC_LOWEST.ExemptionConditionIdRC)
  ExemptionIdRC: coalesce(
    case when least(EXMP_FAC_RC.exemption_condition_id, EXMP_CP_RC_LOWEST.ExemptionConditionIdRC) = EXMP_CP_RC_LOWEST.ExemptionConditionIdRC 
         then EXMP_CP_RC_LOWEST.ExemptionIdRC 
    end,
    EXMP_FAC_RC.exemption_id
  )
  ExemptionNameRC: coalesce(
    case when least(EXMP_FAC_RC.exemption_condition_id, EXMP_CP_RC_LOWEST.ExemptionConditionIdRC) = EXMP_CP_RC_LOWEST.ExemptionConditionIdRC 
         then EXMP_CP_RC_LOWEST.ExemptionNameRC 
    end,
    EXMP_FAC_RC.exemption_name
  )
  ExemptionTypeRC: coalesce(
    case when least(EXMP_FAC_RC.exemption_condition_id, EXMP_CP_RC_LOWEST.ExemptionConditionIdRC) = EXMP_CP_RC_LOWEST.ExemptionConditionIdRC 
         then EXMP_CP_RC_LOWEST.ExemptionTypeRC 
    end,
    case when EXMP_FAC_RC.exemption_end_date= '9999-12-31' then 'P' else 'T' end
  )

filter_target:
- EXMP_FAC_RC.exemption_condition_id is not null or EXMP_CP_RC_LOWEST.ExemptionConditionIdRC is not null
- ExemptionConditionIdRC = var_lowest_ExemptionClaimConditonID_FAC_RC or ExemptionConditionIdRC = EXMP_CP_RC_LOWEST.ExemptionConditionIdRC

drop_duplicates: true
